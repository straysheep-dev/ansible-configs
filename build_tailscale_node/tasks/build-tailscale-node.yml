---
# build_tailscale_node/tasks/build-tailscale-node.yml

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Populate service facts
  ansible.builtin.service_facts:

# tasks/firewall.yml
- name: Configure ufw rules for Debian/Ubuntu
  ansible.builtin.shell: |
    set -o pipefail
    sudo ufw allow ssh;
    echo 'y' | sudo ufw enable;
  args:
    executable: /bin/bash
  when: ("'ufw' in ansible_facts.packages") and
        (modify_firewall == "true")
  become: true
  become_method: ansible.builtin.sudo

- name: Configure firewalld rules for RedHat/Fedora
  ansible.builtin.shell: |
    sudo systemctl unmask firewalld;
    sudo systemctl start firewalld;
    sudo systemctl enable firewalld;
  args:
    executable: /bin/bash
  when: ("'firewall-cmd' in ansible_facts.packages") and
        (modify_firewall == "true")
  become: true
  become_method: ansible.builtin.sudo

# tasks/forwarding.yml
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html
# https://stackoverflow.com/questions/35654286/how-to-check-if-a-file-exists-in-ansible
- name: Check sysctl path
  ansible.builtin.stat:
    path: /etc/sysctl.d
  register: etc_sysctl_d_exists

- name: Configure packet forwarding in the kernel (/etc/sysctl.d/99-tailscale.conf)
  ansible.builtin.copy:
    content: |
      net.ipv4.ip_forward = 1
      net.ipv6.conf.all.forwarding = 1
    dest: /etc/sysctl.d/99-tailscale.conf
    owner: root
    group: root
    mode: '0644'
  when: (is_exit_node == "true") and
        (etc_sysctl_d_exists.stat.isdir is defined) and
        (etc_sysctl_d_exists.stat.isdir)
  become: true
  become_method: ansible.builtin.sudo

- name: Enable packet forwarding in the kernel (/etc/sysctl.d/99-tailscale.conf)
  ansible.builtin.shell: |
    sudo sysctl -p /etc/sysctl.d/99-tailscale.conf
  args:
    executable: /bin/bash
  when: (is_exit_node == "true") and
        (etc_sysctl_d_exists.stat.isdir is defined) and
        (etc_sysctl_d_exists.stat.isdir)
  become: true
  become_method: ansible.builtin.sudo

# TO DO: Create a task to use /etc/sysctl.conf
#  when: etc_sysctl_d_exists.stat.isdir is not defined and etc_sysctl_d_exists.stat.isdir == False

- name: Allow masquerading in firewalld
  ansible.builtin.shell: |
    sudo firewall-cmd --permanent --add-masquerade
  args:
    executable: /bin/bash
  when: (is_exit_node == "true") and
        (ansible_facts['os_family'] == "RedHat")
  become: true
  become_method: ansible.builtin.sudo

# tasks/tailscale.yml
# This handles installing and running tailscale
# The install.sh script is included in this role under the BSD-3 license for security, instead of using `curl ... | bash -` as root
- name: Copy tailscale-installer.sh to target
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - { src: 'tailscale-installer.sh', dest: '/usr/local/bin/tailscale-installer.sh' }
  become: true
  become_method: ansible.builtin.sudo

- name: Install tailscale (using installer.sh)
  ansible.builtin.command: /usr/local/bin/tailscale-installer.sh
  when: "'tailscale' not in ansible_facts.packages"
  become: true
  become_method: ansible.builtin.sudo

- name: Check tailscale signing key
  ansible.builtin.shell: |
    set -o pipefail
    gpg /usr/share/keyrings/tailscale-archive-keyring.gpg | grep -P "2596\s?A99E\s?AAB3\s?3821\s?893C\s?\s?0A79\s?458C\s?A832\s?957F\s?5868"

- name: Update package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Check if tailscale is already authenticated to a tailnet
  ansible.builtin.shell: |
    tailscale ip
  args:
    executable: /bin/bash
  register: tailscale_auth_check
  when: "'tailscale' in ansible_facts.packages"
  ignore_errors: true
  become: true
  become_method: ansible.builtin.sudo

# Write the value of tailscale_authkey in an ansible-vault encrypted auth.yml file
- name: Authenticate node to tailnet
  ansible.builtin.shell: |
    sudo tailscale up --authkey {{ tailscale_authkey }}
  args:
    executable: /bin/bash
  when: (tailscale_authkey != "") and
        (tailscale_auth_check.stderr.find("NeedsLogin") != -1)
  ignore_errors: true
  become: true
  become_method: ansible.builtin.sudo
  no_log: true

# Advertise as exit node
- name: Advertise as exit node
  ansible.builtin.shell: |
    tailscale up --advertise-exit-node
  args:
    executable: /bin/bash
  when: is_exit_node == "true"
  become: true
  become_method: ansible.builtin.sudo

# tasks/pcap-service.yml
# Only starts if `pcap_service_enable` set to `true` in vars/main.yml
- name: Add pcap-service scripts to server's /usr/local/bin/ path
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - { src: 'pcap-service.sh', dest: '/usr/local/bin/pcap-service.sh' }
  become: true
  become_method: ansible.builtin.sudo

- name: Start pcap-service network monitoring
  ansible.builtin.command: /usr/local/bin/pcap-service.sh
  environment:
    PCAP_PATH: "{{ pcap_service_pcap_path }}"
    CAP_IFACE_CHOICE: "{{ pcap_service_cap_iface }}"
    DAYS: "{{ pcap_service_retention_days }}"
  when: ansible_facts['services']['packet-capture.service']['status'] != "enabled" and pcap_service_enable == "true"
  become: true
  become_method: ansible.builtin.sudo

# tasks/unbound-acl.yml
# These tasks are meant to add the tailscale CGNAT ranges to unbound's ACL if for example this node will
# be an exit node, or do DNS resolution for other nodes.
# It will also prevent Tailscale from modifying /etc/resolv.conf, which breaks DNS when unbound is running

# https://tailscale.com/kb/1081/magicdns#disabling-magicdns
- name: Disable MagicDNS if unbound is enabled
  ansible.builtin.shell: |
    tailscale set --accept-dns=false
  args:
    executable: /bin/bash
  when: ansible_facts['services']['unbound.service']['status'] == "enabled"
  become: true
  become_method: ansible.builtin.sudo

# - name: Add tailscale CGNAT range to unbound acl list
#  ansible.builtin.shell: |
#    echo "server:" > /etc/unbound/unbound.conf.d/unbound-acl.conf
#    echo "        interface: {TO DO}" >> /etc/unbound/unbound.conf.d/unbound-acl.conf
#    echo "        interface: {TO DO} >> /etc/unbound/unbound.conf.d/unbound-acl.conf
#    echo "        access-control: 100.64.0.0/10 allow" >> /etc/unbound/unbound.conf.d/unbound-acl.conf
#    echo "        access-control: {TO DO} allow" >> /etc/unbound/unbound.conf.d/unbound-acl.conf
#  args:
#    executable: /bin/bash
#  when: unbound_status.stdout == 'enabled'
#  notify: Restart Unbound
#  become: true
#  become_method: ansible.builtin.sudo
