---
# configure_systemd_resolved/tasks/configure-resolved.yml

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Set resolved conf path for Debian/Ubuntu
  ansible.builtin.set_fact:
    resolved_conf_path: /etc/systemd/resolved.conf
  when: ansible_facts['os_family'] == "Debian"

- name: Remove existing reoslved configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ resolved_conf_path }}"
    - "{{ resolved_conf_path }}.d"
  become: true
  become_method: ansible.builtin.sudo

- name: Write template configuration
  ansible.builtin.copy:
    src: "resolved.conf"
    dest: "{{ resolved_conf_path }}"
    owner: root
    group: root
    mode: '0644'
    remote_src: false
  become: true
  become_method: ansible.builtin.sudo

# This will write the selected resolver configuration blocks listed in defaults/main.yml
# to {{ resolved_conf_path }}
- name: Configure DNS Resolvers
  include_tasks: configure-dns.yml

- name: Start and enable systemd-resolved
  ansible.builtin.service:
    name: systemd-resolved
    state: started
    enabled: true
  when: (ansible_facts['services']['systemd-resolved.service']['status'] is not none) and
        (ansible_facts['services']['systemd-resolved.service']['status'] != "enabled")
  become: true
  become_method: ansible.builtin.sudo

- name: Restart systemd-resolved to apply the current config
  ansible.builtin.service:
    name: systemd-resolved
    state: restarted
  become: true
  become_method: ansible.builtin.sudo

- name: Stop any other resolvers
  include_tasks: stop-resolvers.yml

- name: Get stats of current resolv.conf
  ansible.builtin.stat:
    path: /etc/resolv.conf
  register: st

# https://www.jeffgeerling.com/blog/2019/how-idempotently-change-file-attributes-eg-immutable-ansible
- name: Remove immutable attribute
  ansible.builtin.file:
    path: /etc/resolv.conf
    attributes: -i
  register: resolv_attrs
  changed_when: "'i' in resolv_attrs.diff.before.attributes"
  when: ("immutable" in st.stat.attributes)
  become: true
  become_method: ansible.builtin.sudo

- name: Apply a new /etc/resolv.conf (Debian / Ubuntu)
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    remote_src: false
  with_items:
    - { src: 'resolv.conf', dest: '/etc/resolv.conf' }
  when: ansible_facts['os_family'] == "Debian"
  become: true
  become_method: ansible.builtin.sudo

- name: Get stats of new resolv.conf
  ansible.builtin.stat:
    path: /etc/resolv.conf
  register: st

# https://www.jeffgeerling.com/blog/2019/how-idempotently-change-file-attributes-eg-immutable-ansible
- name: Make new /etc/resolv.conf immutable (Debian / Ubuntu)
  ansible.builtin.file:
    path: /etc/resolv.conf
    attributes: +i
  register: resolv_attrs
  changed_when: "'i' in resolv_attrs.diff.before.attributes"
  when: (ansible_facts['os_family'] == "Debian") and
        ("immutable" not in st.stat.attributes)
  become: true
  become_method: ansible.builtin.sudo
