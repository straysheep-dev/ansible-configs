---
# configure_systemd_resolved/tasks/configure-dns.yml

- name: Populate service facts
  ansible.builtin.service_facts:

# Halts execution of the playbook if 'nextdns' is configured, but the profile string is not
- name: Validate NextDNS profile string
  ansible.builtin.fail:
    msg: NextDNS configured, but profile string is null.
  when: ('nextdns' in dns_resolvers) and
        (nextdns_profile == "replace_with_profile_id")

# This is the task block to dynamically populate your DNS resolvers based on your choices in
# defaults/main.yml using lookup() to read the text files of the same names under files/.
# See the example "Insert/Update configuration using a local file and validate it" with lookup
# here: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/blockinfile_module.html
- name: Append selected DNS resolver configuration blocks
  ansible.builtin.blockinfile:
    path: "{{ resolved_conf_path }}"
    owner: root
    group: root
    mode: "644"
    insertafter: '^\[Resolve\]$'
    prepend_newline: false
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item }}"
    block: "{{ lookup('ansible.builtin.file', item) }}"
  loop: "{{ dns_resolvers }}"
  become: true
  become_method: ansible.builtin.sudo
  tags:
    - molecule-idempotence-notest

# Replace the placeholder lines for NextDNS with the profile string
- name: Write NextDNS profile string
  ansible.builtin.replace:
    path: "{{ resolved_conf_path }}"
    regexp: 'replace_with_profile_id'
    replace: "{{ nextdns_profile }}"
  when: "'nextdns' in dns_resolvers"
  become: true
  become_method: ansible.builtin.sudo
  tags:
    - molecule-idempotence-notest
